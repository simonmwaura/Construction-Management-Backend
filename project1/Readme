Prerequisites:
1. Python
2. Pip
3. Pipenv
4. Thunderclient 

Use of thunderclient extension on visual studio code to tst the application

Objectives:
1. Folder Structure
2. models - SQLAlchemy
3. migration
4. seeding - Faker

Setup steps
1. install flask in your virtual environment.
   pipenv install flask
2. Run your virtual environment.
   pipenv shell
3. Ensure that the virtual environment is running.
4. to run flask in terminal
   a. cd backend
   b. flask run
5. install SQLAlchemy package for flask.
   pipenv install Flask-SQLAlchemy


1. Models.py file
    Flask does not have any design pattern therefore you must start everything from scratch.
    A design pattern is a folder structure that is used.
    Types of design patterns
    1. MVC - (Model View Controller) - we wil use this
    2. MVT - (Model View Template)

    Model - handle data logic
    View  - to display data to the user(Fronend)
    Controller - Intermediary between the model and the view

    View -> Controller -> Model



2. App.py file

Models.py Steps

1. import SQLAlchemy
from flask_sqlalchemy import SQLAlchemy

2. initialize your database to sql alchemy method

db = SQLAlchemy()

3. initialize you classes .

class Client(db.Model):
    pass
class Suppliers(db.Model):
    pass
class Personnel(db.Model):
    pass
class Projects(db.Model):
    pass
class Certification(db.Model):
    pass
class Equipment(db.Model):
    pass
class Materials(db.Model):
    pass
class Financials(db.Model):
    pass

meaning of db.Model - classes are mapped to database tables any Model you will create will be converted to a database table after migrations so we are inheriting the db.Model features.

for instance in the 1st case the Client class is inheriting db.Model attributes 

class Client (db.Model):
      id = db.Column(db.Integer , primary_key = True )
    # in this case Column is an attribute that is inherited by Client from db which is from SQl ALchemy

handling relationships
eg between projects and clients 
client_id = db.Column(db.Integer , db.ForeignKey('Client.id') , nullable = False)
 db.ForeignKey('Client.id') Client is a table and id is the column we are referencing

parent table =  Client 
child table = Project

if we dont want to pass a relationship (Foreign key) in the parent table (Client) we can implement a line of code that will help us fetch a client with their related project

code = projects = db.relationship('Project',backref='client',lazy=True)
'Project' = this is the model
backref='client' = this refers to the client


2. Migration
This is needed when you want to use the models
installation - needs flask migration package 
change directory until you see the pipfile and then in your terminal run pipenv shell to run your virtual environment.

then pipenv install Flask-Migrate to install the package.

in the app.py we will
1. import flask Migrate
2. import the models
3. connect to the database
4. initialize the migrations
5.initialize the database


1. import flask Migrate
from flask_migrate import Migrate

2. import the models
from models import db,Client,Supplier,Personnel,Project,Certification,Equipment,Material,Financial


3. connect to the database
  app = Flask(__name__)
  app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///HousingDevelpment.db"
  this is because the config is an array and the database which is
  "sqlite:///HousingDevelopment.db" the database is called HousingDevelopment

remember to use the sqlite viewer extension

4. initialize the migrations
migrate = Migrate(app,db)
Migrate(app,db)
app -> this is the app that we have initialized that contains the database URI
so the app below
app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///HousingDevelpment.db"

5.initialize the database
db.init_app(app)

in the terminal we will
remember to navigate to the folder that has your app.py and remember to run your virtual environment.

1. initialize the migration environment/create the databases
 command = flask db init
 this command will create an instance which is a folder and also creates the migration folder 
 inside the migrations folder there is a folder called versions where the migration files will be held

 1st migration
 this will create a migration file and it will store all the data from the Classes which will be converted into tables after migrating them

 2. actually migrate
 command =  flask db migrate -m "1st migration"
"1st migration" simply the migration name

3. there will be a new file created inside the migration folder inside the versions folder for me it is called 2baa20fdffd6_1st_migration.py

inside it there are 2 functions upgrade and downgrade
upgrade = create tables
downgrade =  drop tables

To create the database tables = flask db upgrade
To delete the database tables = flask db downgrade

when it comes to upgrade there are 2 types:
1. flask db upgrade
2. flask db upgrade head - this updates the database tables based on the next migration  
e.g in versions there are 3 files 2baa20fdffd6_1st_migration.py,b,c 
 we have already run flask db upgrade for this one 2baa20fdffd6_1st_migration.py so now if we want to run flask db upgrade it will go to the next created migration file which is b
 so there is an order
 THAT IS FOR UPGRADE ALONE

 FOR UPGRADE HEAD it will run all the available migrations